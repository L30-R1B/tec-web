{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["file:///home/leonardo/tec-web/src/services/api.tsx"],"sourcesContent":["// src/services/api.ts\nconst API_BASE_URL = 'http://100.124.95.109:3333';\n\ninterface RegisterData {\n  nome: string;\n  email: string;\n  senha: string;\n  is_admin?: boolean;\n}\n\ninterface LoginData {\n  email: string;\n  senha: string;\n}\n\ninterface User {\n  id: number;\n  nome: string;\n  email: string;\n  saldo: number;\n  is_admin: boolean;\n}\n\ninterface Room {\n  id: number;\n  nome: string;\n  descricao: string;\n}\n\nclass ApiService {\n  private getAuthHeaders() {\n    const token = localStorage.getItem('token');\n    return {\n      'Content-Type': 'application/json',\n      ...(token && { 'Authorization': `Bearer ${token}` }),\n    };\n  }\n\n  // Auth endpoints\n  async register(data: RegisterData) {\n    const response = await fetch(`${API_BASE_URL}/auth/register`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data),\n    });\n    if (!response.ok) throw new Error('Erro ao registrar');\n    return response.json();\n  }\n\n  async login(data: LoginData) {\n    const response = await fetch(`${API_BASE_URL}/auth/login`, {\n      method: 'POST',\n      headers: { 'Content-Type': 'application/json' },\n      body: JSON.stringify(data),\n    });\n    if (!response.ok) throw new Error('Credenciais inválidas');\n    const result = await response.json();\n    if (result.token) {\n      localStorage.setItem('token', result.token);\n    }\n    return result;\n  }\n\n  async getProfile() {\n    const response = await fetch(`${API_BASE_URL}/auth/profile`, {\n      headers: this.getAuthHeaders(),\n    });\n    if (!response.ok) throw new Error('Erro ao buscar perfil');\n    return response.json();\n  }\n\n  // User endpoints\n  async getMe() {\n    const response = await fetch(`${API_BASE_URL}/users/me`, {\n      headers: this.getAuthHeaders(),\n    });\n    if (!response.ok) throw new Error('Erro ao buscar dados do usuário');\n    return response.json();\n  }\n\n  async updateMe(data: Partial<User>) {\n    const response = await fetch(`${API_BASE_URL}/users/me`, {\n      method: 'PATCH',\n      headers: this.getAuthHeaders(),\n      body: JSON.stringify(data),\n    });\n    if (!response.ok) throw new Error('Erro ao atualizar perfil');\n    return response.json();\n  }\n\n  async recharge(amount: number) {\n    const response = await fetch(`${API_BASE_URL}/users/me/recharge`, {\n      method: 'POST',\n      headers: this.getAuthHeaders(),\n      body: JSON.stringify({ amount }),\n    });\n    if (!response.ok) throw new Error('Erro ao recarregar créditos');\n    return response.json();\n  }\n\n  // Admin - User management\n  async createUser(data: RegisterData) {\n    const response = await fetch(`${API_BASE_URL}/users`, {\n      method: 'POST',\n      headers: this.getAuthHeaders(),\n      body: JSON.stringify(data),\n    });\n    if (!response.ok) throw new Error('Erro ao criar usuário');\n    return response.json();\n  }\n\n  async getAllUsers() {\n    const response = await fetch(`${API_BASE_URL}/users`, {\n      headers: this.getAuthHeaders(),\n    });\n    if (!response.ok) throw new Error('Erro ao buscar usuários');\n    return response.json();\n  }\n\n  async getUserById(id: number) {\n    const response = await fetch(`${API_BASE_URL}/users/${id}`, {\n      headers: this.getAuthHeaders(),\n    });\n    if (!response.ok) throw new Error('Erro ao buscar usuário');\n    return response.json();\n  }\n\n  async deleteUser(id: number) {\n    const response = await fetch(`${API_BASE_URL}/users/${id}`, {\n      method: 'DELETE',\n      headers: this.getAuthHeaders(),\n    });\n    if (!response.ok) throw new Error('Erro ao deletar usuário');\n    return response.json();\n  }\n\n  // Rooms endpoints\n  async getAllRooms() {\n    const response = await fetch(`${API_BASE_URL}/rooms`, {\n      headers: this.getAuthHeaders(),\n    });\n    if (!response.ok) throw new Error('Erro ao buscar salas');\n    return response.json();\n  }\n\n  async getRoomById(id: number) {\n    const response = await fetch(`${API_BASE_URL}/rooms/${id}`, {\n      headers: this.getAuthHeaders(),\n    });\n    if (!response.ok) throw new Error('Erro ao buscar sala');\n    return response.json();\n  }\n\n  async createRoom(data: { nome: string; descricao: string }) {\n    const response = await fetch(`${API_BASE_URL}/rooms`, {\n      method: 'POST',\n      headers: this.getAuthHeaders(),\n      body: JSON.stringify(data),\n    });\n    if (!response.ok) throw new Error('Erro ao criar sala');\n    return response.json();\n  }\n\n  async updateRoom(id: number, data: Partial<Room>) {\n    const response = await fetch(`${API_BASE_URL}/rooms/${id}`, {\n      method: 'PATCH',\n      headers: this.getAuthHeaders(),\n      body: JSON.stringify(data),\n    });\n    if (!response.ok) throw new Error('Erro ao atualizar sala');\n    return response.json();\n  }\n\n  async deleteRoom(id: number) {\n    const response = await fetch(`${API_BASE_URL}/rooms/${id}`, {\n      method: 'DELETE',\n      headers: this.getAuthHeaders(),\n    });\n    if (!response.ok) throw new Error('Erro ao deletar sala');\n    return response.json();\n  }\n\n  // Games endpoints\n  async getAllGames() {\n    const response = await fetch(`${API_BASE_URL}/games`, {\n      headers: this.getAuthHeaders(),\n    });\n    if (!response.ok) throw new Error('Erro ao buscar jogos');\n    return response.json();\n  }\n\n  logout() {\n    localStorage.removeItem('token');\n  }\n}\n\nexport const api = new ApiService();\nexport type { User, Room };"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 175, "column": 0}, "map": {"version":3,"sources":["file:///home/leonardo/tec-web/src/contexts/AuthContext.tsx"],"sourcesContent":["// src/contexts/AuthContext.tsx\n'use client';\n\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { api, User } from '@/services/api';\n\ninterface AuthContextType {\n  user: User | null;\n  loading: boolean;\n  login: (email: string, senha: string) => Promise<void>;\n  logout: () => void;\n  register: (nome: string, email: string, senha: string, is_admin?: boolean) => Promise<void>;\n  refreshUser: () => Promise<void>;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: React.ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    checkAuth();\n  }, []);\n\n  const checkAuth = async () => {\n    try {\n      const token = localStorage.getItem('token');\n      if (token) {\n        const userData = await api.getMe();\n        setUser(userData);\n      }\n    } catch (error) {\n      console.error('Erro ao verificar autenticação:', error);\n      localStorage.removeItem('token');\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const login = async (email: string, senha: string) => {\n    await api.login({ email, senha });\n    const userData = await api.getMe();\n    setUser(userData);\n  };\n\n  const register = async (nome: string, email: string, senha: string, is_admin?: boolean) => {\n    await api.register({ nome, email, senha, is_admin });\n    await login(email, senha);\n  };\n\n  const logout = () => {\n    api.logout();\n    setUser(null);\n  };\n\n  const refreshUser = async () => {\n    try {\n      const userData = await api.getMe();\n      setUser(userData);\n    } catch (error) {\n      console.error('Erro ao atualizar usuário:', error);\n    }\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, loading, login, logout, register, refreshUser }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth deve ser usado dentro de um AuthProvider');\n  }\n  return context;\n}"],"names":[],"mappings":"AAAA,+BAA+B;;;;;;;;AAG/B;AACA;;;AAHA;;;AAcA,MAAM,4BAAc,IAAA,4LAAa,EAA8B;AAExD,SAAS,aAAa,KAA2C;QAA3C,EAAE,QAAQ,EAAiC,GAA3C;;IAC3B,MAAM,CAAC,MAAM,QAAQ,GAAG,IAAA,uLAAQ,EAAc;IAC9C,MAAM,CAAC,SAAS,WAAW,GAAG,IAAA,uLAAQ,EAAC;IAEvC,IAAA,wLAAS;kCAAC;YACR;QACF;iCAAG,EAAE;IAEL,MAAM,YAAY;QAChB,IAAI;YACF,MAAM,QAAQ,aAAa,OAAO,CAAC;YACnC,IAAI,OAAO;gBACT,MAAM,WAAW,MAAM,+IAAG,CAAC,KAAK;gBAChC,QAAQ;YACV;QACF,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,mCAAmC;YACjD,aAAa,UAAU,CAAC;QAC1B,SAAU;YACR,WAAW;QACb;IACF;IAEA,MAAM,QAAQ,OAAO,OAAe;QAClC,MAAM,+IAAG,CAAC,KAAK,CAAC;YAAE;YAAO;QAAM;QAC/B,MAAM,WAAW,MAAM,+IAAG,CAAC,KAAK;QAChC,QAAQ;IACV;IAEA,MAAM,WAAW,OAAO,MAAc,OAAe,OAAe;QAClE,MAAM,+IAAG,CAAC,QAAQ,CAAC;YAAE;YAAM;YAAO;YAAO;QAAS;QAClD,MAAM,MAAM,OAAO;IACrB;IAEA,MAAM,SAAS;QACb,+IAAG,CAAC,MAAM;QACV,QAAQ;IACV;IAEA,MAAM,cAAc;QAClB,IAAI;YACF,MAAM,WAAW,MAAM,+IAAG,CAAC,KAAK;YAChC,QAAQ;QACV,EAAE,OAAO,OAAO;YACd,QAAQ,KAAK,CAAC,8BAA8B;QAC9C;IACF;IAEA,qBACE,2MAAC,YAAY,QAAQ;QAAC,OAAO;YAAE;YAAM;YAAS;YAAO;YAAQ;YAAU;QAAY;kBAChF;;;;;;AAGP;GArDgB;KAAA;AAuDT,SAAS;;IACd,MAAM,UAAU,IAAA,yLAAU,EAAC;IAC3B,IAAI,YAAY,WAAW;QACzB,MAAM,IAAI,MAAM;IAClB;IACA,OAAO;AACT;IANgB","debugId":null}}]
}